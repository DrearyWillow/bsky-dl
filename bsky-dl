#!/usr/bin/env python

import requests
import subprocess
import sys
import json
from pathlib import Path

defaults = {
    #input_dir >> default_dir >> cwd
    "default_dir": ''
}

# TODO: images, # of quotes in chain, subtitles

def help_text():
    print("""
bsky-dl [url] [location] [options]

Download videos and extract json from Bluesky posts.

OPTIONS:
    --m3u8: download m3u8 video rather than blob
    --json: print the getPostThread JSON to file
    --replies: include replies and parents in JSON

The file download location uses the following hierarchy:
    1. Location specified in command
    2. default_dir specified in script
    3. Current working directory
    """)
    sys.exit()

def input_validation(filename):
    if "--help" in sys.argv: help_text()
    m3u8_mode = 0 if "--m3u8" not in sys.argv else (sys.argv.remove("--m3u8") or 1)
    json_mode = 0 if "--json" not in sys.argv else (sys.argv.remove("--json") or 1)
    reply_mode = 0 if "--replies" not in sys.argv else (sys.argv.remove("--replies") or 1)
    url = sys.argv[1] if len(sys.argv) >= 2 else (print("No url entered.") or sys.exit(1))
    directory = sys.argv[2] if len(sys.argv) >= 3 else (Path.cwd() if defaults["default_dir"] == '' else defaults["default_dir"])
    if not Path(directory).is_dir():
        if Path(directory).parent.is_dir(): print(f"{directory} is not a valid directory") or sys.exit(1)
        directory = str(input_path.parent)
        filename = input_path.stem
    return url, directory, filename, json_mode, m3u8_mode, reply_mode

def url2uri(post_url):
    parts = post_url.rstrip('/').split('/')
    if len(parts) < 4: raise ValueError(f"Post URL '{post_url}' does not have enough segments.")
    rkey = parts[-1]
    username = parts[-3]
    return f"at://{resolve_did(username)}/app.bsky.feed.post/{rkey}", rkey

def resolve_did(handle):
    response = requests.get(f'https://bsky.social/xrpc/com.atproto.identity.resolveHandle?handle={handle}')
    if response.status_code != 200: raise Exception(f"Failed to resolve DID: '{response.text}'")
    return response.json()['did']

def get_post_thread(post_url, reply_mode):
    at_uri, rkey = url2uri(post_url)
    params = {'uri': at_uri, 'depth': 1000 if reply_mode else 0, 'parentHeight': 1000 if reply_mode else 0}
    response = requests.get('https://public.api.bsky.app/xrpc/app.bsky.feed.getPostThread', headers={'Content-Type': 'application/json'}, params=params)
    if response.status_code != 200: raise Exception(f"Failed to retrieve post thread: '{response.text}'")
    return response.json(), rkey

def check_ffmpeg():
    try: 
        result = subprocess.run(['ffmpeg', '-version'], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
        if result.returncode != 0: print("ffmpeg is not installed.") or sys.exit(1)
    except FileNotFoundError: print("ffmpeg is not installed.") or sys.exit(1)

def download_video(post_data, path, m3u8_mode):
    if not post_data.get('thread', {}).get('post', {}).get('record', {}).get('embed', {}).get('video', ''): print("This post has no video.") or sys.exit(1)
    check_ffmpeg()
    if m3u8_mode:
        playlist_url = post_data.get('thread', {}).get('post', {}).get('embed', {}).get('playlist', '')
        if not playlist_url: print(f"Post does not have a video embed.") or sys.exit(1)
        response = subprocess.run(['ffmpeg', '-i', playlist_url, '-c', 'copy', '-bsf:a', 'aac_adtstoasc', path])
    else:
        did = post_data.get('thread', {}).get('post', {}).get('author', {}).get('did', {})
        blob_cid = post_data.get('thread', {}).get('post', {}).get('record', {}).get('embed', {}).get('video', {}).get('ref', {}).get('$link', "")
        response = requests.get(f"https://bsky.social/xrpc/com.atproto.sync.getBlob?did={did}&cid={blob_cid}")
    if response.returncode == 0: print(f"Video successfully downloaded to {path}")

def main():
    post_url, directory, filename, json_mode, m3u8_mode, reply_mode = input_validation("")
    post_data, rkey = get_post_thread(post_url, reply_mode)
    ext = "json" if json_mode else "mp4"
    path = f"{directory}/{rkey}.{ext}" if filename == "" else f"{directory}/{filename}.{ext}"
    if json_mode: (json.dump(post_data, open(path, 'w'), indent=4) or print(f"JSON extracted to '{path}'") or sys.exit())
    download_video(post_data, path, m3u8_mode)

if __name__ == "__main__":
    main()